{"version":3,"sources":["components/TabFlight.js","components/Flight.js","components/FlightList.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["TabFlight","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tabHandler","bind","assertThisInitialized","event","target","tabIndex","_this2","tabUl","map","tab","i","className","react_default","a","createElement","key","onClick","Component","Flight","terminal","gate","time","destination","airline","flight","status","FlightList","flights","getData","flightRows","depData","assign","getLocalTime","slice","getFlightStatus","ON","LN","concat","CX","DP","CK","DL","BD","FR","CC","App","requestFlightsHandler","request","parseFlights","JSON","parse","responseText","setState","state","body","error","loadData","today","Date","flightData","String","getDate","padStart","getMonth","getFullYear","sendRequest","url","handler","XMLHttpRequest","open","addEventListener","send","depFlight","term","gateNo","timeDepShedule","en","name","codeShareData","codeShare","timeDepFact","arrivalFlight","timeArrShedule","timeLandFact","tabId","flightTable","_this$state","loading","FlightList_FlightList","departure","getDepData","arrival","getArrivalData","TabFlight_TabFlight","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b03099e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TabFlight.css';\n\nexport default class TabFlight extends Component {\n  constructor(props) {\n    super(props);\n    this.tabHandler = this.tabHandler.bind(this);\n  }\n  tabHandler(event) {\n    this.props.tabHandler(event.target.tabIndex)\n  }\n  render() {\n    const { tabIndex } = this.props;\n    const tabs = ['Departures', 'Arrivals'];\n    const tabUl = tabs.map((tab, i) => {\n      const className = (i === tabIndex) ? 'active' : 'no-active';\n      return (<button className={className} tabIndex={i} key={i} onClick={this.tabHandler}>{tab}</button>);\n    });\n\n    return (\n      <nav>\n        {tabUl}\n      </nav>\n    );\n  }\n\n}\n","import React from 'react';\n\nexport default function Flight(props) {\n  const { terminal, gate, time, destination, airline, flight, status, tabIndex  } = props;\n  const className = (terminal === 'A') ? 'terminal-a' : 'terminal-d';\n  return (\n    <tr className=\"flight\">\n    <td className={className}>{terminal}</td>\n    {tabIndex === '0' ? (<td>{gate}</td>) : null}\n    <td>{time}</td>\n    <td className=\"destination\">{destination}</td>\n    <td>{status}</td>\n    <td className=\"airline\">{airline}</td>\n    <td>{flight}</td>\n    </tr>\n  );\n}\n","import React from 'react';\nimport Flight from './Flight';\nimport './FlightList.css';\n\nexport default function FlightList(props) {\n  const { flights, getData, tabIndex } = props;\n  const flightRows = flights.map((flight, i) => {\n    const depData = getData(flight);\n    return  (<Flight {...depData} key={i} tabIndex={tabIndex} />);\n  });\n\n  return (\n    <section className=\"flight-table\">\n      <table>\n        <thead>\n          <tr>\n          <th>Terminal</th>\n          {tabIndex === '0' ? (<th>Gate</th>) : null}\n          <th>Local time</th>\n          <th className=\"destination\">Destination</th>\n          <th>Status</th>\n          <th className=\"airline\">Airline</th>\n          <th>Flight</th>\n          </tr>\n        </thead>\n        <tbody>{flightRows}</tbody>\n      </table>\n    </section>\n  );\n}\n","export function getLocalTime(time) {\n  return (time) ? time.slice(12, 16) : '-';\n}\n\nexport function getFlightStatus(status, time) {\n  const FlightStatuses = {\n    'ON': 'On time',\n    'LN': `Landed ${time}`,\n    'CX': 'Canceled',\n    'DP': `Departed at ${time}`,\n    'CK': 'Check-in',\n    'DL': 'Delayed',\n    'BD': 'Boarded',\n    'FR': '-',\n    'CC': '-'\n\n  }\n  return FlightStatuses[status];\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TabFlight from './components/TabFlight';\nimport FlightList from './components/FlightList';\nimport {getLocalTime, getFlightStatus} from './utils';\n\nconst serverUrl = 'https://api.iev.aero/api/flights/';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabIndex: 0,\n      flights: null,\n      error: 0\n\n    }\n    this.tabHandler = this.tabHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData() {\n    const today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    const yyyy = today.getFullYear();\n    const flightData = dd + '-' + mm + '-' + yyyy;\n    this.setState(state => ({\n      flights: null,\n      error: 0\n    }))\n    this.sendRequest(`${serverUrl}${flightData}`, this.requestFlightsHandler);\n  }\n\n  sendRequest(url, handler) {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.addEventListener('load', handler(request));\n    request.send();\n  }\n\n  requestFlightsHandler = request => () => {\n    if (request.status !== 200) {\n      this.setState(state => ({\n          error: request.status\n        })\n      );\n      return;\n    }\n    const parseFlights = JSON.parse(request.responseText);\n    this.setState(state => ({\n      flights: parseFlights.body\n    }));\n  }\n\n\n  getDepData(depFlight) {\n    return {\n      terminal: depFlight.term,\n      gate: depFlight.gateNo,\n      time: getLocalTime(depFlight.timeDepShedule),\n      destination: depFlight['airportToID.city_en'],\n      airline: depFlight.airline.en.name,\n      flight: depFlight.codeShareData[0].codeShare,\n      status: getFlightStatus(depFlight.status, getLocalTime(depFlight.timeDepFact))\n    }\n\n\n  }\n\n  getArrivalData(arrivalFlight) {\n    return {\n      terminal: arrivalFlight.term,\n      time: getLocalTime(arrivalFlight.timeArrShedule),\n      destination: arrivalFlight['airportFromID.city_en'],\n      airline: arrivalFlight.airline.en.name,\n      flight: arrivalFlight.codeShareData[0].codeShare,\n      status: getFlightStatus(arrivalFlight.status, getLocalTime(arrivalFlight.timeLandFact))\n    }\n  }\n\n  tabHandler(tabId) {\n    this.setState(state => ({\n      tabIndex: tabId\n    }))\n  }\n\n  render() {\n    const { tabIndex, flights, error } = this.state;\n    const loading = (error === 0) ? 'Loading...' : `Request error:${error}`;\n    let flightTable;\n    if (flights === null) {\n      flightTable = (<p>{loading}</p>);\n    } else {\n      if (tabIndex === 0) {\n        flightTable = (<FlightList flights={flights.departure} getData={this.getDepData} tabIndex='0' />);\n      } else {\n        flightTable = (<FlightList flights={flights.arrival} getData={this.getArrivalData} tabIndex='1' />);\n      }\n    }\n    return (\n      <div className=\"App\">\n        <TabFlight tabIndex={tabIndex} tabHandler={this.tabHandler} />\n        {flightTable}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}